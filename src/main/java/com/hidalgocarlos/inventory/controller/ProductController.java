package com.hidalgocarlos.inventory.controller;

// import org.springframework.web.bind.annotation.CrossOrigin;
import com.hidalgocarlos.inventory.model.Product;
import com.hidalgocarlos.inventory.service.IProductService;
import com.hidalgocarlos.inventory.utils.ErrorResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/inventory-api/products") // Base URL for product-related endpoints
// The following annotation is commented out because a configuration file is used to set the CORS policy globally.
// Uncomment the line below if you want to enable CORS for this controller specifically.
// @CrossOrigin(value = "http://localhost:4200")// Adjust the origin as needed for your Angular application
public class ProductController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductController.class);

    // final -> Indicates that this field will not be reassigned after initialization
    // IProductService -> Interface for product service, allowing for dependency injection and easier testing
    private final IProductService productService; // Service for managing products

    /**
     * Constructor for ProductController.
     * @param productService The product service to be used by this controller.
     */
    @Autowired
    public ProductController(IProductService productService) {
        this.productService = productService;
        LOGGER.info("ProductController initialized");
    }

    /**
     * Retrieve all products from the inventory.
     * @return ResponseEntity containing the list of products and appropriate HTTP status.
     */
    @GetMapping("/all") // Endpoint to retrieve all products -> http://localhost:8080/inventory-api/products/all
    public ResponseEntity<List<Product>> getAllProducts() {

        LOGGER.info("Retrieving all products");

        // Get the list of all products from the service
        List<Product> products = this.productService.getAllProducts();

        // Check if the list is empty and log accordingly
        if (products.isEmpty()) {
            LOGGER.warn("No products found in the inventory");
            //return ResponseEntity.status(HttpStatus.NO_CONTENT).body(products); // Return 204 No Content if the list is empty
            return ResponseEntity.ok(products); // Return 200 OK with the list of products
        } else {

            // Print the list of products to the console for debugging purposes
            // Uncomment the line below to log each product's details
            // Note: This is commented out to avoid excessive logging in production.
            // LOGGER.info("Products retrieved:");
            // this.productService.getAllProducts().forEach(product -> LOGGER.info(product.toString()));
            // Note: The toString method is generated by Lombok, so it will print
            LOGGER.info("Total products retrieved: {}", products.size());
            return ResponseEntity.ok(products); // Return 200 OK with the list of products
        }

    }

    /**
     * Retrieve a product by its ID.
     * @param productId The ID of the product to retrieve.
     * @return ResponseEntity containing the product details or an error message if not found.
     */
    @GetMapping("/{productId}") // Endpoint to retrieve a product by its ID -> http://localhost:8080/inventory-api/products/{productId}
    // The productId will be passed as a path variable in the URL
    // Example: http://localhost:8080/inventory-api/products/1
    public ResponseEntity<?> getProductById(@PathVariable("productId") Integer productId) {

        LOGGER.info("Retrieving product with id: {}", productId);
        // Retrieve a product by its ID
        Product product = this.productService.getProductById(productId);

        // Check if the product is null and log accordingly
        if (product == null) {
            LOGGER.warn("Product with id {} not found", productId);
            // Create an error response object with a message and details
            // The ErrorResponse class can be used to standardize error responses in your API
            ErrorResponse errorResponse = new ErrorResponse("Product with id " + productId + " does not exist", HttpStatus.NOT_FOUND.value());
            // Return a 404 Not Found response with an error message
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse); // Return 404 Not Found with an error message

        } else {
            LOGGER.info("Product retrieved: {}", product);
            return ResponseEntity.ok(product); // Return 200 OK with the product details
        }

    }


}
